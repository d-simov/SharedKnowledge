

Процедурно програмиране vs обектно-ориентирано програмиране;
baeldung.com - супер яки туториали;
"Златна книга на таланта" - Даниел Койл

visualalgo - сайт за визуализиране на алгоритми.

ЦЕЛи след 7-8-9 години:
Project Management
TEAM LEAD
CTO
ARCHITECTURE
Advisor
Всеки, който се научи може да коди. Като порасна, ще мога да давам повече стойност с по-малко код. Ще ми е интересно да решавам проблеми, но няма да ми е интересно да пиша цикли и ще е хубаво да кажа на друг 
как да ги пише.

PRODUCT vs OUTSOURCE компании:

OUTSOURCE 
	ПЛЮСОВЕ
		Работи се периодично върху различни задачи. Не умръзва. Редуват се скучни и интересени. Упражняваш повече технологии.
	МИНУСИ
		налага се да знаеш повече неща.
PRODUCT
	ПЛЮСОВЕ
		Компанията е като семейство. Силни връзки, отношения.
	МИНУСИ
		Работиш върху един продукт: харесва ти или не - това е продукта.
КАКВАТО И КОМПАНИЯ ДА ИЗБЕРА, ТРЯБВА ДА СИ ТЪРСЯ МЕНТОР.



321 backup rule		- минимум 3 backup-a
					- на минимум 2 места
					- поне едно от тях да е offline
					

МАТЕМАТИЧЕСКИ ЗНАНИЯ, КОИТО ТРЯБВА ДА ПРЕГОВОРЯ ЗА ПРОГРАМИРАНЕ:
	- логаритми
	- КОМБИНАТОРИКА - вариации, пермутации, комбинации
	- Транспортна задача
	
КОГАТО ТРЪГНА ДА РЕШАВАМ ПРОБЛИМ, ТРЯБВА ДА ТРЪГНА ОТ ИЗИСКВАНИЯТА, КОИТО СА МИ ДАДЕНИ И ОТ ОГРАНИЧЕНИЯТА, КОИТО ИМАМ. 

	* какво трябва да направим  \  
								  >	решавам какви инструменти ще ползвам.
	* какви са ни ограниченията	/
-------------------------------------------------------------------------------------------------------------------------	


ПОЛЕЗНИ АБРЕВИЕТУРИ:

KISS vs WET
Keep It Simple Stupid != We Enjoy Typing

POJO - Plain Old Java Object - клас, който се използва само за съдържане на данни.

JVM	- Java Virtual Machine
JRE - Java Runtime Environment
JDK - Java Development Kit

CSV - при Google-ване (Comma Separated Value);

API	- Application Programming Interface - публично достъпни за нас функционалности, които можем да ползваме наготово, свързани с програмирането на апликации. С две думи - купчини с методи и класове :D

РЕЦЕПТА ЗА РЕШАВАНЕ НА ЗАДАЧИ:
	- SPECIFICATION 	СПЕЦИФИКАЦИЯ	
		- да си прочетем условието 5 пъти. Не взимам никакви решения преди това;
		- всяко изречение е там с цел. Всяко изречение е жокер.
	- DESIGH			ДИЗАЙН			- в ООП - кои са главните действащи лица в нашия обект:
		- Define Objects	
			- кои са класовете, които ще играят основна роля в нашата симулациям (кой, какво, с кого, къде - променливи, конструктори, методи)
		- Define Relations	
			- какви са IS A и HAS A връзките между обектите. Кой какво има и кой кого наследява (наследяване и композиция)
			- от кого можем да правим обекти, кои класове трябва да групираме (abstraction & interfaces);
		- Define Actions 	
			- кой каква функционалност (метод) да има.
			- кой какво override-ва.
			- ВСИЧКО ТОВА НА ЛИСТ ХАРТИЯ!
	- IMPLEMENTATION	
		- coding classes, interfaces, 
		- defining variables. constructors;
		- declaration of methods (without body);
		- writing demo -> какви методи, какво да приемат, какво да връщат и какво да правят?
		- за всеки метод пишем тяло.
	- TESTING			- 
		- run the demo and hope for the best;
		- no exceptions should occur;
		- All output should be presented as required.
	- REFACTORING		
		- classes, interfaces, methods, fields NAMING - всичко ли е с правилни наименования?
		- magic numbers removed - навсякъде ли имам константи и променливи вместо числа? 
		- code duplication - ако имам някъде дублиран код да го извадя в метод.
		
// TODO	- когато IntelliJ види този надпис в коментар, приема, че е нещо, което трябва да си напомня да свърша тепърва и го удебелява, за да е видимо на фона на околния код.


В Ъ П Р О С И   З А   И Н Т Е Р В Ю :

Може ли в нестатичен метод да извикам статичен метод? 	/ Може!
Може ли в статичен метод на извикам нестатичен метод?	/ Не може! 	защото нестатичните методи се изпълняват върху обект, а идеята на статичния е да може да бъде извикан дори без съществуване на обекти.
Обобщение: В статичен метод не мога да ползвам нестатични методи или променливи, мога само други статични. Заради това в main метода (който е static) мога да викам  само други методи, които също са static.
В нестатичен метод мога да викам както статични, така и нестатични методи.

Имам в масив оценките по математика на всички ученици в BG. Как ще ги сортирам?		/ Conting sort. Милиони оценки ще сортирам с помощен масив от 5 елемента (2-6). Клони към линейна сложност.

При клас променлива String name; в конструктора подаваме name = name; Въпрос: какво ще е името на обекта?  / null, защото се получава shadowing и променливата в параметъра на конструктора засенчва клас променливата.

Какъв retyrn type мога да върна, ако overiide-на един метод? - същия или подтип (или такъв, който наследява подварианта от суперкласа). Това се нарика ковариантност или ковариантен return type.

Как можем да реализираме абстракция? 	/ Чрез интерфейс или чрез абстрактен клас.

Мога ли на final променлива да променя стойността?					/ Мога. Мога да променям всички характеристики, но не мога да променя накъде да сочи променливата.

Как мога да инициализирам final променлива?							/ или при декларация или в конструктор;

Мога ли да инициализирам final променлива в два конструктора?		/ Мога. Защото за създаване на обект ще бъде използван не повече от един от двата конструктора.

Може ли абстрактен метод да бъде private?							/ Не. Противоречи на дефиницията. Може да е само публичен.

Мога ли да направя final abstract метод?							/ Не. Противоречи на дефиницията. Щом е abstract, трябва да бъде реализиран чрез override. Щом е final, не може да бъде overiide-нат.

Мога ли да направя abstract final class?							/ Не. Еднотата ключова дума означава, че класът трябва да се наследи, другата ключова дума забранява наследяването.

Мога ли да имам статичен клас?										/ Да. Само ако е вложен.

Може ли метод да върне две стойности?								/ Да, само ако връща обект от клас, който има две полета. Такъв клас би бил статичен.

Как мога да извикам Garbage Collectora?								/ System.gc(); - правим опит да извикаме GC, той обещава, че ще дойде, но идва, когато сам прецени. Защото GC е много тежка операция и се самоизвиква
																	в определени моменти, когато JVM не е под толкова голямо напрежение.
																	
Как бихте имплементирали UNDO функционалност в приложение			/ със Stack				А Undo и Redo с два стека.

Има ли как да сложа в TreeSet елементи, които не имплементират Comparable	/ Да. Ако на TreeSet-а добавя изрични компаратор.

Как мога в HashSet да си вкарам елементи и да ги извикам в същия ред, в който съм ги вкарал?	/ Не мога. Трябва да си направя LinkedHashSet, за да стане.

Какво е Loading Factor?												/ Процентът от заети бъкети в Hash Table структурата от данни, над който Hash Таблицата се саморазширява. Тя преизчислява hash функцията и разселва
																	постъпилите елементи между всички бъкети, вкл. новите. По подразбиране е 75%. Началния размер на Hash таблицата е 16 бъкета.
																	
Имате всички мравки на света. В каква колекция ще ги сложите ?		/ Дърво. То ни гарантира логаритмична сложност, независимо от броя елементи.
(за да можете много бързо да ги добавяте и търсите).				Хеш таблицата обикновено е по-бързата структура, защото дава константна сложност, но при милиони елементи, все по-трудно се преодолява 
																	loading factor-а, Linked-list-тите във всеки бъкет трупат все повече елементи преди следващото разширяване на таблицата и сложността много 
																	бързо избухва в по-висока от логаритмична.

Има ли как в treeSet да сложа елементи, които не 					/ Да, ако на treeSet-а добавите изрично Comparator.
имплементират Comparable?

Как мога в HashSet да вкарам елементи и да ги покажа в				/ Не можете. Трябва да ги вкарате в LinkedHashSet, за да се получи.
реда, в който съм ги вкарал?

S H O R T C U T S :

Shift + F6				- преименува променливата навсякъде, където тя се среща;
SHift + Shift			- search everywhere.  Double pressing the shift key opens a search box that lets us look for anything.
Shift + F10				- стартира повторно последно стартиралата програма.
Ctrl + Shift + F10		- стартира отворената в момента програма.
Ctrl + Shift + "-"		- свива всички блокове от код, за да е по-обозримо тялото на програмата (по-четима "голямата картина").	
Ctrl + Ctrl				- run everything;

Ctrl + Alt + V			- extract/introduce Variable;
Ctrl + Alt + M			- extract/introduce Method;
Ctrl + Alt + L			- format the current file to the project’s standards
Ctrl + Alt + T 			- при маркиран текст, ми предлага да го вложи в условие, for или while цикъл и мн. др. to quickly wrap a code block in useful constructs, select it in the editor and press Ctrl+Alt+T 
						(Code | Surround With). The list of available options or wrappers is context-sensitive and depends on the language
Ctrl + Alt + Shift + T	- при позиционирането на курсора върху символ, отваря списъка с рефакторирания, които са приложими към настоящия контекст.

Alt + Ins				- докато курсора е в scope-а на клас, генерира (Constructor, Getter, Setter, etc.)

Ctrl + P				- Когато дефинирам обект от клас с билдър и се чудя кой е следващия ми параметър, натискам Ctrl+P. Това ми дава подсказка какво се изисква от конструктора, за да допиша дефиницията на обекта.

Ctrl + Click on деклариран Method	 		- показва къде този метод се ползва. Ако се ползва на едно място, отива директно там. 
Ctrl + Click on Method, който е използван	- води до декларацията му.

Ctrl+Shift+V			- to select the text fragment that you have previously copied to the clipboard.

Ctrl + Space 			- basic completion - предлага варианти за дописване - the choices that are reachable from the current caret position. Press Ctrl+Space again to also see inaccessible classes and members.
"to" + Ctrl + Space		- предлага ми да override-не метода toString();

Alt + Enter				- показва ми предложенията за реакция, когато попадна на ред, който не се компилира. Върху ред, който се компилира ми показва алтернативи.
Ctrl + Space + Enter	- Когато не ми се компилира кода, защото в суперкласа вече нямам конструктор по подразбиране, създава в субкласа конструктор, който да отговаря на суперконструктора. После дописвам при нужда.
Ctrl + Shift + I 		- to preview the definition or content of the symbol at the caret, without opening it in a separate editor tab.
Ctrl + Shift + "-" 		- затваря всички блокове от код до първите им редове, за да се вижда по-пригледно цялата програма.

Shift + mouse scroll	- скролирам хоризонтално през кода, вместо вертикално.

F2 						- jump to the next error/suggestion in the current file.
Shift+F2 				- jump to the previous error in the current file.





Т Е Р М И Н И :

Всички примитивни типове данни имат т.нар. опаковка от референтен тип: char има Character; int има Imteger и т.н.
Regression - регрес при редактирането на програмата - поправим нещо и то чупи две други.

Два вида памет - статична (Stack) и динамична (Heap).
	 - Primitives are stored into the Static memory;
	 - Objects are referent types and are stored into the Heap;
	 - The reference to the object is kept in the static memory;

"The quick brown fox jumps over the lazy dog" - текст, който съдържа всички букви в английската азбука. 

В Java с @ започват анотациите.
Анотацията е флаг (label), че следва определон парче код с определена функция; Анотациите са добри практики. Ползват се за четимост и за сигурност.
@Override вдига флаг, че следва метод, който не е собственост на този клас, а е override (предефиниция) на метод от някой суперклас.

System.exit(0); - прекратява процеса. Директно застрелва витруалната машина и изпълнението на програмата приключва.

AUTOBOXING - автоматична обвивка. Примитивните типове данни се autobox-ват в референтните им обвивки.
Причината: Java си работи с тях прекрасно и като примитивни типове. Но не могат да бъдат поставяни в колекции. ArrayList имплементира Collection и работи само с обекти. За да може да работи с int, 
примитивния тип int се autobox-ва, ще се wrap-не (ще се окомплектова) в обект от тип Integer. Тези wrapper-и се ползват, за да можем да работим с числа в ООП среда във функционалности, които работят само с обекти.
Когато мога да работя само с обект, но искам число, ми трябва обект, който съдържа само число.

instance of		(референция instance of тип данни) - булев израз, връща true или false дали референцията е от посочения тип данни или негово дете.

* ClassCastExeption		- ексепшън, когато се опитвам да намачкам перънт клас към клас конкретно дете, но референцията в момента сочи към друго дете на същия перънт.

АЛГОРИТЪМ				- последователността от стъпки, които трябва да предприемем, за да решим някоя задача

MARKER INTERFACE 		- Interface with no methods.
FUNCTIONAL INTERFACE	- Interface with only 1 abstract method.

LAMBDA EXPRESSION		- SHORTER WAY OF CREATING AN INSTANCE OF AN ANONYMOUS CLASS THAT IMPLEMENTS FUNCTIONAL INTERFACE.
ЛАМБДА ИЗРАЗ			- СЪКРАТЕН ЗАПИС НА ОБЕКТ, КОЙТО ИМПЛЕМЕНТИРА ФУНКЦИОНАЛЕН ИНТЕРФЕЙС. /shorter way of creating an instance of an anonymous class that implements a functional interface/ 
						Щом е функционален, има само един метод и е ясно, че ще го override-на и че ще override-на точно него, затова не ми трябва да го записвам. Достатъчно е да напиша само кои са 
						му параметрите и какво му е тялото.							(parameters) -> {body}
						Convenient for new streams library: 						shapes.forEach(s -> s.setColor(Color.RED));
						
						
						button.addActionListener(					става			button.addActionListener(e -> doSomethingWith(e));
							new ActionListener(){
								@Override
								public void actionPerformed(ActionEvent e) {
									doSomethingWith(e);
								}
							});
							
Effectively Final Local Variables	- variables that never change their value untill the end of the lifecycle.
									в един локален клас мога да използвам променливи от обкръжаващия го блок от код, стига те да са final или effectively final ().
							

DATA STRUCTURES			- идеи за съхранение на елементи в определен ред
COLLECTIONS				- обекти в Java, които реализират тези идеи.

sorted					- елементите са сортирани по някакъв критерий;
ordered					- елемените са подредени по реда на въвеждането им от оператора. 
(В HashSet елементите са unsorted и unordered)

Decappling				- състояние на програмата, в което обектите не знаят един за друг. 

Modev View Controller	- най-високото ниво на Decappling.

Arrays					- helper class за масивите
Collections				- helper class за колекциите

forEach					- available for every iterable object:
						for(String s : set) {
							System.out.println(s);
						}

Marker Interface 		- интерфейс, който няма методи и се ползва само за групиране на обекти.

Type Inferencing		- процесът, при който компилаторът автоматично определя типа на данни на променлива въз основа на стойността, която и се присвоява. 

Method reference		- кратък начин за изразяване на ламбда изрази, които се свеждат до извикване на метод (по-кратък и четим синтаксис за извикване на методи в определени контексти)
						List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
						names.forEach(System.out::println);					- използвай метода println на класа System.out
						---------------------------------------------------------------------------------------------------
						words.sort(String::compareTo);						- използвай метода compareTo на класа String
						
НАЙ-ИЗПОЛЗВАНИ ФУНКЦИОНАЛНИ ИНТЕРФЕЙСИ И ТЕХНИТЕ МЕТОДИ:

API - Application Programming Interface	- Публично достъпни функционалности, свързани с програмирането на апликации, които мога да ползвам на готово (купчини с класове и методи в моя помощ)


Т Е М И :

*	TIME MANAGEMENT:
		- System.currentTimeMillis() - връща като long текущото време в милисекунди;
			long start = System.currentTimeMillis();
			...... some code here.....
			long end = System.currentTimeMillis();
			sout(end - start);
						
		- 	Date start = new Date();
			...... some code here.....
			Date end = new Date();
			sout(end.getTime() - start.getTime());
			
		- Thread.sleep(long)	- "приспива" текущата нишка за посочения в скобите брой милисекунди.
		

*	RETURN RANDOM NUMBER:
	Math.random() връща произволно число от 0 до 0,999999... (от 0 до 1 без 1);

	int min = 5;
	int max = 20;
		1. 	Math.random - TO BE CONTINUED -----------------------------------------------------------------------------------------------------------------------------------------------------------------
		
		2.	Random r = new Random();
			System.out.println(r.nextInt(max - min + 1) + min);

	r.nextInt() - 		връща рандом int число от Math.MIN of Math.MAX;
	r.nextInt(n) - 		връща рандом int число от 0 inclusive до n exclusive;
	r.nextBoolean() - 	връща рандом TRUE or FALSE.
	
* 	Return стойностите на характеристиките на обекта със System.out.println(име на обект):
	override toString() method in class body.
	
*	RegExp	-	to verify that your regular expression is correct, place the caret within the expression you want to check, press Alt+Enter, and select Check RegExp.
	In the popup, type a sample string that should match your regular expression. The tick icon shows that the match occurred.
	
	
	
	
	
	
	
	
	
Д О Б Р И    П Р А К Т И К И : 
==============================

* Когато работя с йерархия от класове, добра идея е да напиша логиката само веднъж в parent класа с динамичен цикъл (цикъл, който да върти до getNumber() абстрактен метод, който да override-на да ми връща 
различна стойност във всеки подчинен клас (така ще съм и задължен да го реализирам във всяко дете);
	
	
	
	
	
	W O R K I N G   W I T H   D A T E   I N   J A V A  8 :

	Date&Time API-то работи с три класа:
	java.time.LocalDate		- representation of the current date;				\
	java.time.LocalTime		- representation of the current time;				 > Обектите от тези класова са Immutable, т.е. при промяна винаги ни се връща нова дата/час, като стария се запазва.
	java.time.LocalDateTime	- representation of combination of the two above.	/
	
	LocalDate date = new LocalDate.now();				ИЛИ					LocalDate date = new LocalDate.of(2023, 10, 17);
	date.get......
	date.plus(......, .....)   - например plus(Temploral amount) - в скобите е обект. Мога да създам обект и да му кажа "Ти си 2 години, 6 месеца и 8 дни!"
	date.minus(....., ....)
	
	Ако искам да подам конкретна дата, мога с:
	LocalDateTime localDateTime = LocalDateTime.of(int year, int month, int dayOfMonth,........);
	
	МАНИПУЛИРАНЕ НА ДАТИ: имам два допълнителни помощни обекта:
	Period		- обект, който държи период от време (дни, месеци, години)
	Duration	- обект, който държи период от време (часове, минути, секунди)
	Тези обекти могат да се инстанцират и референциите им да се добавят към дадена дата, за да получим бъдещ момент на дадено събитие (например изтича акаунта).
	
	Using ZonedDateTime:
	МНОГО Е ВАЖНО ДА ЗНАЯ ЗА ЧАСОВИТЕ ЗОНИ И ДА БОРАВЯ ДОБРЕ С ТЯХ: Всеки уважаващ себе си проект се ползва от потребители по цял свят. Но часът при различните акаунти е различен. 
	Затова когато взимам час от потребителя, трябва да взема и неговата часова зона.
	* ZoneId	- represents all 40 different time zones with 601 identifiers ("Europe/London");
	
	
	
	

