
GUI					- Graphic User Interface
CLI					- Command Line Interface
	В CLI:
		- с doubleclick на мишката копирам селектирания текст (дума, ред, ...)
		- с натискане на mouse scroll-а го пействам в command line-а.

GIT					- best distributed VCS (Version Control System)
Repository			- Хранилище (оригиналния източник, от който всички, работещи по проекта копират свършеното до момента и към който подават промените си).
commit					- обект, който държи в себе си единица промяна

Споделени онлайн репозиторита:
	- GitHub.com	- всички repository-та са public. Всеки може да гледа, не всеки може да пипа.
	- BitBucket.org	- всички repository-та са private. Имам определен брой хора (май 5), които могат да пипат и работат. На 6-тия трябва да си платя, за да отключат и т.н. 
	- GitLab.com

nano				- текстов редактор под Linux - интуитивен.
vi					- текстовия редактор под Linux по подразбиране - много зачукан.


git --version			- връща текущата версия на Git на компютъра ми;
pwd						- показва ми къде се намирам в момента (пътя от root-а към текущата директория).
touch krasi.txt			- touch модифицира последното време на достъп на файла (но ако файлът не съществува, го създава).
cat	moni.txt			- визуализира съдържанието на файла, без да отваря текстов редактор.
cd directory			- change directory
ls						- показва съдържанието на текущата папка като лист в няколко колони, без детайли
ls -al					- показва съдържанието на текущата папка като с details, като файловете са в една колона и срещу тях - подробно инфо 
						детайлите (пърмишани (кой може да го чете и изпълнява (ако е изпълним)м път до файла; размер; последна дата на достъпване; име; разширение;
rm moni.txt				- remove - изтрива файла
cp moni.txt ../			- копирай файла в горната директория
help					- дава ми списъка с команди, които мога да ползвам в GitBash
man						- (работи само под Linux, но не в GitBash) - дава ми manual-а на нещо (на това, което следва man командата)
compgen -cat			- ще ми даде списък с всички команди, които мога да стартирам

ps aux					- показва всички процеси, които в момента run-ват на нашата машина
ps aux | grep java		- показва всички текущи процеси, които се казват (или съдържат в името си, не знам) java


Системни файлове
./						- системен файл, pointer към текущата директория (като this)
../						- системен файл, pointer към parent дируктарията (като super)



vi (Linux текстовия редактор)
vi dido.txt				- зарежда dido.txt в текстовия редактор. По подразбиране при влизане е в режим на четене.
s						- вкарва ни в режим на INSERT и вече мога да пиша (редактирам)
Esc						- излизам от режим на INSERT и се връщам в режим на четене. Докато съм в режим на четене като пиша, пиша в command реда на дъното команди за работа с редактора	
:wq!					- команда за изход (write / quit / don't ask if I am sure)


G I T    C O M M A N D S :

git clone link				- клонира кода от линка на моя комп, за да мога да работя с него. Командата се ползва само веднъж, когато създаваме копие на компа. Никога повече не се ползва за този проект.
git status					- връща информация къде се намирам, в кое репозитори и какво се случва в моята локална папка. Добра практика е да ползвам git status буквално след всяка една команда.
git add filename			- дава информация на git, че този файл съществува и, че git трябва да пази вече инфо за него (промени, изтриване и пр.) и да пази версия на този файл.
							- подготвя файла за commit
git add .					- добави всички файлове
git add main				- добави тази папка
git rm --cashed filename	- премахва файла от окомплектовката файлове, подготвени с git add за следващия commit.
	Натискането на Tab, след като съм започнал да изписвам файлово име, прави опит за предположение кой е файла, за да го допише вместо мен (пести време)

git commit								- прави комит със стейджнатите промени (файлове)
git commit -a							- вкарай всичко, по което е работено в комита (комбинира git add и git commit)
git commit -m							- добави съобщение към комита
git commit -a -m "Added 3 new files"	- добавя всичко add-нато в commit-а към repositary-то с коментара в кавичките.

git log						- връща целия timeline (списъка с commit-ите). Те се намират на локалната ми машина и все още не са в хранилището.
git log --graph				- врйщя целия timeline визуализиран графично (доколкото е възможно в текстов режим)
git push					- взима моя timeline (моят локален branch), взима всички commit-и и се опитва да ги качи на repository-то.
	Моят branch (основният) се нарича 'master'.
	Основният branch в repo-то се нарича 'origin/master'.
git pull					- взима commit-ите от repo-то в GitHub и ги праща в моето локално repo (в моя локален branch)=
git diff					- връща разликата между състоянието на файловете след промяната, която съм извършил и състоянието на файловете от последния commit.

Винаги pull-ваме, когато вече сме commit-нали.	

git pull --help				- връща инфо за всичко, свързано с командата pull. Показва цялата част от документацията на git, свързана с pull.

git stash					- понякога някой в основния бранч е направил критичен commit, който е важен за целия проект и трябва да pull-на. Но не мога да pull-на ако имам незавършена работа, която не съм 
							commit-нал (иначе с какво ще се слее pull-а). Но аз не искам да commit-вам, защото кода ми е доникъде, незавършен, хвърля грешки - не искам да го обобщавам в commit само, за да 
							pull-на. Тогава давам git stash. Това shash-ва промените, които съм направил - запазва ги наум и ги маха от директорията, за да не се налага да ги пъхам в commit. Сега вече мога 
							спокойно да pull-на. След това пиша:
git stash pop				- и ми връща от стека моите половинчати работи, по които продължавам да си бачкам, след като вече съм pull-нал важното.

git branch					- показва всички бранчове. Срещу един от тях има звездичка (*). Тя показва на кой бранч съм в момента.
git branch -a				- показва и локалните и remote бранчовете.
git checkout branchname		- така мога да се прехвърлям от един бранч в друг.


ХВАТКИ:
git log						- виждам всички commit-и. Решавам, че искам да разбера съдържанието на някой commit. Копирам идентификатора на commi-а, който ме интересува и го пействам срещу командата show:
git show 1464b5bcf144dc92afdf8ad37da5267231ea2206					- показва ми разликите между избрания commit и неговия parent.
git checkout 1464b5bcf144dc92afdf8ad37da5267231ea2206				- връща файловете ми в състоянието им към момента, на който съответства избрания комит.
git checkout master													- връщам се обратно в настоящето
	Така мога да се върна назад във времето и да видя как е работело нещо преди да се случи дадено събитие или да се прехвърлям между различни бранчове.
git checkout develop_master											- прехвърля ме върху клона develop_master, който е копие на master клона. След това git status ми връща, че вече работя с този клон, а не с master-а.
git diff commit1..commit2	- връща разликата между два избрани commit-а в миналото.
git reset filename			- обратното на git add. Премахва посочения файл от stage-а (подготовката) за commit.
git checkout filename		- връща всички промени, направени от последния commit досека (изтрити файлове, нови файлове, редакции на код, всичко). Опасна команда - да се ползва с внимание.

git tag name commit			- assigns a name to a commit - имената на commit-ите по подразбиране са идентификаторите им. За да улесня търсенето, ключови моменти от проекта могат да бъдат именовани. Например:
git tab beta-release 1729bh3

git status трябва да ми бъде буквално всяко втора команда, за да виждам на кой бранч съм и докъде съм стигнал в каквото правя.

git branch develop  		- създава чисто нов бранч develop, който е пълно копие на оригиналния. И от тук нататък, вече мога да комитвам само в копието.
							после отивам в основния бранч и пиша:
git merge develop			- и моя develop branch с merge-ва с основния бранч.
Като отида на работа и работя по проект, си отцепвам един мой бранч и си мажа и работя по него задачата. Такива бранчове се наричат feature branches. Когато съм готов, го мърджвам с общия бранч и 
взимам следващата си задача.
