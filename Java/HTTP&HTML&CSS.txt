
H T T P :
HTTP 		- Hyper Text Transfer Protocol - текстов протокол за комуникация между компютри (в общия случай между клиент и сървър)
			
			FrontEnd   <--->  HTTP  <--->   BackEnd
			
			HTTP  	изпраща данните в чист вид (не ги криптира)
			HTTPS 	изпраща данните в криптиран вид, който може да се разчете само от сървъра, но не и от някой, който прихваща сигнала по средата.

HTTP PROTOCOL - Client side (browser)
	TCP protocol
		IP protocol
			Ethernet
				Wires, WiFi
			Ethernet
		IP protocol
	TCP protocol
HTTP PROTOCOL = Server side (server)


HTTP DEVELOPER TOOLS
	Има ги във всеки браузър:
		Rightclick - inspect
			ИЛИ
		Rightclick - Developer Tools

HTML FORMS
	Способ за изпращане на информация към сървъра.
	HTTP defines methods to indicate the desired action to be performed on the identified resource:
		- GET	- взима данни. Можем да изпращаме данни с GET - като поставим филтър, по който да вземем данни (всяка търсачка - Google или вътрешна в сайт). По този начин ключа (думата) за търсене се изписва в URL.
				Когато кликна върху бутон, правя GET заявка без параметри. Когато търся нещо, напр. "Simov", правя GET заявка с параметър "Simov", прилагам GET метода с параметър.
		- POST	- когато напиша нещо във формите, данните не излизат в URL-а, а направо в HTTP request-a. Ползва се при въвеждане на чувствителна информация.
	Основната разлика между GET и POST е начина, по който изпращаме данни към сървъра.
	
	Когато видя неразбираем URL, той вероятно е encode-нат от кирилица. Мога да отваря online URL decoder и ще получа въведеното търсене, генерирало този URL.

HTTP REQUEST	- method + headers + body
HTTP METHODS:
	- GET		- retrieve a resource						GET spaceBar resource path spaceBar HTTP version, отдолу известен брой хедъри и празен ред		GET users/Tech-Modules/repos HTTP/1.1
	- POST		- create/store a resource					структурата е като при GET заявката, но данните не попадат в URL-а и не се виждат в браузъра, а попадат под хедърите, отделени с празен ред.
	- PUT		- update (replace) a resource
	- DELETE	- delete (remove) a resource
	- PATCH		- update resource particially (modify)
	- HEAD		- retrieve a resource headers

HTTP RESPPONSE 	- status + headers + body
Отговора на сървъра. Състои се от няколко реда:

HTTP response status codes:
	100-199	- 	informational responces
	200-299 - 	successful responces
	300-399 - 	redirection messages
	400-499 - 	client error responces
	500-599 - 	server error responces


HTTP 1.1 200 OK												- версия на HTTP и статус код
няколко реда хедъри за име на сървъра, обем на отговора,...	- 
празен ред


URLs AND URL Structure

Protocol://Host:Port/Path?QueryString#Fragment
http://mySite.com:8080/demo/index.php?id=27&lang=en#lectuers
	- Network protocol (ftp, http, https, ...) - http in most cases
	- Host or IP address (softuni.org, gmail.com, 127.0.0.1, ...)
	- Port (the default port is 80) - integer in range [0, 65535]
	- Path (/forum или /path/index.php)
	- Query String (?id=27&lang=en)
	- Frangment (#slides) - vigates to a sector of the page.

Query String in the URL contains data (данни, които искам да изпратя) that is not part of the path structure.

==================================================================================================================================================================

H T M L :

HTML is a language that describes web content.
HTML описва структурата на една уеб страница (web document) - text with formatting, images, lists, tables, hyperlinks, forms. etc...

В HTML дефинирам отделните части на документа с тагове. <h1> some text here </h1> 			<h1>	- отварящ таг за заглавие

HTML пренебрегва white space (tabs, new rows, space bars)
В HTML винаги, когато искам нещо, създавам валиден таг от него. Мога да правя и вградени файлове. С таговете създаваме елементи на документа.

Стандартно HTML има следната структура:
<html>					- дефиницията на нашия документ;
	<head>				
	....
	....				- данни, които uers-а не вижда
	</head>
	<body>
	...
	...					- нещата, които user-а вижда
	...
	</body>
</html>

Когато създам <title> таг в <head> тага, така си кръщавам името на таба на прозореца, в който е отворен документа.
<html>					- дефиницията на нашия документ;
	<head>				
		<title> My first HTML
	</head>
	<body>
	</body>
</html>

В HTML има три основни термина:
	ТАГОВЕ 					- имат функцията да създават елементи. Биват отварящи и затварящи.
	АТРИБУТИ на таговете	- име=стойност двойки, които добавят допълнително инфо към всеки елемент. Атрибути могат да се създават към всеки един елемент като се закрепят към отварящия таг.
	
	
	
Т А Г О В Е    В   H T M L :

<head></head>			- блок от данни, които потребителя не вижда, служебен текст и тагове, с които се дефинират видове шрифтове, информация на табове и друга служебна информация
<body></body>			- блок от данни, които са в прозореца на html документа, който потребителя вижда
<p></p>					- нов параграф, помества смислово обособени текстове
<strong></strong>		- показва, че това е по-важна информация за съдържанието като удебелява текста (bold) - Гугъл бота търси и отчита тези неща.
<em></em>				- показва, че това е по-важна информация за съдържанието като, накланя текста (italic)
<h1></h1>				- указва заглавие - с по-голям шрифт, удебелено и пр.
<h2></h2>				- указва подзаглавие - с по-голям (но не чак толкова) шрифт, удебелено и пр.
.........
<h6></h6>				- указва под-подзаглавие - с не чак толкова голям шрифт, удебелено и пр.

Absolute hyperlink		- води до друга, пълна (цялостна) страница.
	<a href="http://abv.bg"> HighlightedClickableText </a>					- anker tag
Relative hyperlink		- води до текущата папка, в която се намирам.
Ако не укажа път (http или директория на харда), href ще потърси указания файл в същата папка, в която се намира текущия HTML файл (така мога да насоча към презентация или друго)
HTML Hyperlink			- линка да води към място в текущата страница
	<a href="#bottom">Go to bottom!</a>		- "Go to bottom" става хиперлинк, който води до тага, който има id, съвпадащо с името в хиперлинка (в случая "bottom")=
	в дъното на документа оформям заглавие или друг елемент с id "bottom":
	<h1 id="bottom">
		.......
	</h1>
	
<ol>					- ordered list - вади списък, като задава на всяка точка пореден номер
	<li>SomeTextHere</li>
	<li>SomeOtherTextHere</li>
</ol>

<ul>					- unordered list - вади списък, но отделните точки са отбелязани с булети
	<li>SomeTextHere</li>
	<li>SomeOtherTextHere</li>
</ul>

ФОРМИ:
<form>
	<input type="checkbox" /> Check me					- визуализира чек бутон (квадратче) с надпис "Check me" до него
	<input type="button" /> 							- визуализира бутон
	<input type="date" /> 								- дава възможност да си изберем дата от падащ календар
	<input type="range" /> 								- визуализира плъзгач
	<input type="text" /> 								- визуализира текстово поле
</form>

ТАБЛИЦИ:
<table>													- поставя началото на таблица
	<tr style="border: 1 px solid black;">				- поставя ред (table row) и го стилизира таблицата да има непрекъсната рамка с дебелина 1 пиксел в черен цвят
		<td style="border: 1 px solid black;">1</td>	- поставя клетка в реда (table data) и стилизира самата клетка да има непрекъсната рамка с дебелина 1 пиксел в черен цвят
		<td>2</td>									
		<td>3</td>								
	</tr>
	<tr>												- поставя началото на втори ред и т.н.
	</tr>
</table>												- дефинира края на таблица

За да не дефинирам по отделно форматирането на всяка клетка, е достатъчно да го обява в началоно в <head>-а:
<head>
	<title>My first HTML</title>
	<style>
		table td {
			border: 1 px solid black;
		}
	</style>
</head>

Има и самозатварящи се тагове:
<br />					- break - прави нов ред.
<img />					- image - изображение. За да работи един image трябва да му сложа source атрибут src="filename.jpg"

Много от таговете имат атрибути, които указват детайли по това как да се изпълнят таговете.
Например <img /> има source атрибут 


C S S :

CSS дефинира стиловете на HTML елементите и дефинира как да изглеждат.

CSS format: selector {prop1: val1; prop2: val 2} - селектирам елемент от HTML композицията и му задавам различни пропъртита, всяко със своя стойност.
	Елементите имат default-но поведение. Поведението по подразбиране на някои елементи е да заемат толкова място, колкото му позволява родителя (block) 
	в случая страницата и зависи от размера на страницата - заглавие, параграф
	
	Eлементът може да заеме и мястото, което му е необходимо - нужния минимум (хедъра е толкова дълъг и широк, колкото е текста в него) - inline block 	
	сега вече мога да контролирам височина, ширина, отстаяние на полето

<head>
	<title>My first HTML</title>
	<style>
		h1 {
			color: red;
			font-size: 40px;
			background-color: yellow;
			
		}
		p {
			color: rgb(37, 104, 192);					- задава цвят на буквите с конкретни rgb стойности
			font-size: 14px;
			background-color: grey;
			display: inline-block;						- задава елемента да е в стил inline block - да заеме минималното пространство, което му е нужно да се визуализира.
			width: 500px;								- задава дължина на блока от 500 пиксела
			height: 100px;								- задава височина на блока от 100 пиксела
			text-align: center;							- центрира текста в посочения размер на блока
			border-radius: 10px;						- заобля ръбовете на полето с посоченото закръгление (10px)
			margin-right: 50px;							- задава разстоянието до следващия дясностоящ елемент на 50 пиксела
			padding-top: 25px;							- увеличава разстоянието вътре в елемента от горната му част до горния ръб на елемента с 25 пиксела
		}
	</style>
</head>

Ако махна inline-block дефиницията, но оставя всички останали, следващия елемент ще се подреди отдолу. Защото този елемент ще изглежда дълъг 500px, 
но реално ще заема (окупира, запазва) цялата страница (до края на реда)

Ако форматирам в <head> - тогава всички заглавия <h1> ще бъдат форматирани по този начин. Но ако искам само първото или само някои от тях да са с определен формат, използвам class.
Класовете позволяват да именовам някои обекти, които след това мога да реферирам.
<head>
	h1.weird {									- в <head>-а указвам всички <h1> с клас weird да бъдат форматирани по указания тук начин.
		color: red;
		font-size: 40px;
		background-color: yellow;		
	}
	
	.text-green {								- това означава всички обекти, без значение какви са, които имат клас text-green да бъдат в указания по-долу звят (зелен)
		color: green;
	}
</head>
<body>
	<h1 class="weird">
		I am a header!
	</h1>
</body>

Мога да приложа CSS styles по три начина:
	
	1. в <body> към всеки отделен елемент в отварящия му таг (inline css style);
	
	2. в <head> като си отвиря таг <style> (internal css style)- за всички елементи от даден тип или от даден клас </style> - мога да реферирам по class, по tag или по id;
	Най-добре е да се реферира по клас, защото мога да ги миксирам както си искам (като при интерфейсите в Java) и съм максимално гъвкав. ID-тата са уникални и се отнасят всяко за конкретен елемент.
	
	3. в отделен .css файл(в нашия пример style.css), който след това да упомена в <head>-а, че от там си взимам style-а на HTML документа. И тук мога да реферирам по class, по tag или по id.
<head>
	<link rel="stylesheet" type="text/css" href="style.css">
</head>

Всички inline стилове, които са написани в самите тагове override-ват глобалните.
Друг, частен начин да приложе selector-а е с element ID. ID-о е уникално за всеки елемент. То може да се реферира в <head>-а или в .css файла по следния начин:
<head>
	h1.weird {									
		color: red;
		font-size: 40px;
		background-color: yellow;		
	}
	#main-header {
		font-size: 200px;
	}
</head>
<body>
	<h1 id="main-header" class="weird">
		I am a header!
	</h1>
</body>
	
	
BLOCK ELEMENTS:
<div> and <p> are block elements (rectangles):
	* fill the entire container width
	* stack vertically one after another
	
<div> и <span> не правят нищо специфично и нямат собствени формати. Те просто дефинират блок от определени елементи.	
<div>	- дефинира нов блоков (block) елемент
<span>	- дефинира неблоков (inline) елемент. Той е толкова голям, колкото е текста вътре и не застава на нов ред, а след предходния елемент, на същия ред (ако има място в контейнера). Не може да се оразмерява.
<inline-block> - микс - инлайн блоков елемент, който не заема сам цял ред, но можем да му даваме размери и параметри.

ПРИМЕР:
<head>
	div {
		display: inline-block;
	}
	.green {
		background-color: green;
	}
</head>